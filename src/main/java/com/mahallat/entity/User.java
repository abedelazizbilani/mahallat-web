package com.mahallat.entity;
// Generated Aug 15, 2018 4:23:34 AM by Hibernate Tools 5.1.8.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "mahallat", uniqueConstraints = { @UniqueConstraint(columnNames = "username"),
		@UniqueConstraint(columnNames = "email") })
@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler" })
public class User implements java.io.Serializable {

	private Integer id;
	private Role role;
	private String username;
	private String email;
	private Byte active;
	private String name;
	private String lastname;
	private Date createdAt;
	private Date updatedAt;
	@JsonIgnore
	private Set<ProductRating> productRatings = new HashSet<ProductRating>(0);
	@JsonIgnore
	private Set<StoreLike> storeLikes = new HashSet<StoreLike>(0);
	@JsonIgnore
	private Set<StoreRating> storeRatings = new HashSet<StoreRating>(0);
	@JsonIgnore
	private Set<Comment> comments = new HashSet<Comment>(0);
	@JsonIgnore
	private Set<ProductLike> productLikes = new HashSet<ProductLike>(0);
	@JsonIgnore
	private Set<Store> stores = new HashSet<Store>(0);

	public User() {
	}

	public User(Role role, String username, String email) {
		this.role = role;
		this.username = username;
		this.email = email;
	}

	public User(Role role, String username, String email, Byte active, String name, String lastname, Date createdAt,
			Date updatedAt, Set<ProductRating> productRatings, Set<StoreLike> storeLikes, Set<StoreRating> storeRatings,
			Set<Comment> comments, Set<ProductLike> productLikes, Set<Store> stores) {
		this.role = role;
		this.username = username;
		this.email = email;
		this.active = active;
		this.name = name;
		this.lastname = lastname;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.productRatings = productRatings;
		this.storeLikes = storeLikes;
		this.storeRatings = storeRatings;
		this.comments = comments;
		this.productLikes = productLikes;
		this.stores = stores;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JsonManagedReference
	@JoinColumn(name = "role_id", nullable = false)
	public Role getRole() {
		return this.role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Column(name = "username", unique = true, nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "email", unique = true, nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "active")
	public Byte getActive() {
		return this.active;
	}

	public void setActive(Byte active) {
		this.active = active;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "lastname")
	public String getLastname() {
		return this.lastname;
	}

	public void setLastname(String lastname) {
		this.lastname = lastname;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created_at", length = 10)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "updated_at", length = 10)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<ProductRating> getProductRatings() {
		return this.productRatings;
	}

	public void setProductRatings(Set<ProductRating> productRatings) {
		this.productRatings = productRatings;
	}
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<StoreLike> getStoreLikes() {
		return this.storeLikes;
	}

	public void setStoreLikes(Set<StoreLike> storeLikes) {
		this.storeLikes = storeLikes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<StoreRating> getStoreRatings() {
		return this.storeRatings;
	}

	public void setStoreRatings(Set<StoreRating> storeRatings) {
		this.storeRatings = storeRatings;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<ProductLike> getProductLikes() {
		return this.productLikes;
	}

	public void setProductLikes(Set<ProductLike> productLikes) {
		this.productLikes = productLikes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	@JsonBackReference
	public Set<Store> getStores() {
		return this.stores;
	}

	public void setStores(Set<Store> stores) {
		this.stores = stores;
	}

}
